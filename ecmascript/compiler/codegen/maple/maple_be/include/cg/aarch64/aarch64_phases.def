/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 ADDTARGETPHASE("layoutstackframe", true);
 ADDTARGETPHASE("createstartendlabel", true);
 ADDTARGETPHASE("buildehfunc", true);
 ADDTARGETPHASE("handlefunction", true);
 ADDTARGETPHASE("moveargs", true);
 ADDTARGETPHASE("stackmapcomputation", false);
 /* Normal OPT PHASES */
 ADDTARGETPHASE("cgprepeephole", CGOptions::DoPrePeephole());
 ADDTARGETPHASE("ebo", CGOptions::DoEBO());
 ADDTARGETPHASE("prepeephole", CGOptions::DoPrePeephole())
 ADDTARGETPHASE("precfgo", false);
 ADDTARGETPHASE("ico", CGOptions::DoICO())
 ADDTARGETPHASE("cfgo", !GetMIRModule()->IsCModule() && CGOptions::DoCFGO());

 ADDTARGETPHASE("prepeephole1", CGOptions::DoPrePeephole());
 ADDTARGETPHASE("ebo1", CGOptions::DoEBO());
 ADDTARGETPHASE("prescheduling", CGOptions::DoPreSchedule());
 ADDTARGETPHASE("raopt", CGOptions::DoPreLSRAOpt());
 ADDTARGETPHASE("cgsplitcriticaledge", GetMIRModule()->IsCModule());
 ADDTARGETPHASE("regalloc", true);
 ADDTARGETPHASE("regsaves", GetMIRModule()->IsCModule() && CGOptions::DoRegSavesOpt());
 ADDTARGETPHASE("clearrdinfo", GetMIRModule()->IsCModule() && (CGOptions::DoStoreLoadOpt() || CGOptions::DoGlobalOpt()));
 ADDTARGETPHASE("generateproepilog", true);
 ADDTARGETPHASE("framefinalize", true);
 ADDTARGETPHASE("dbgfixcallframeoffsets", true);
 ADDTARGETPHASE("cfgo", GetMIRModule()->IsCModule() && CGOptions::DoCFGO());
 ADDTARGETPHASE("peephole0", CGOptions::DoPeephole())
 ADDTARGETPHASE("postebo", CGOptions::DoEBO());
 ADDTARGETPHASE("postcfgo", false);
 ADDTARGETPHASE("cgpostpeephole", CGOptions::DoPeephole())
 ADDTARGETPHASE("peephole", CGOptions::DoPeephole())
 ADDTARGETPHASE("gencfi", !GetMIRModule()->IsCModule() || GetMIRModule()->IsWithDbgInfo());
 ADDTARGETPHASE("yieldpoint", false);
 ADDTARGETPHASE("localschedule", CGOptions::DoLocalSchedule());
 ADDTARGETPHASE("fixshortbranch", true);
 ADDTARGETPHASE("cgirverify", CGOptions::DoCGIRVerify());
 ADDTARGETPHASE("cgemit", true);
